//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TerminalGuiDesigner.UI.Windows
{
    using Terminal.Gui;
    using System.Linq;
    using TerminalGuiDesigner;
    using TerminalGuiDesigner.ToCode;
    using TerminalGuiDesigner.UI.Windows;

    public partial class PosEditor : Window {

        public SnippetProperty Result { get; private set; }
        public bool Cancelled { get; private set; }

        public Design Design { get; }
        public Property Property { get; }

        public PosEditor(Design design, Property property) {
            InitializeComponent();
            
            Design = design;
            Property = property;

            X = Pos.Percent(25);
            Y = Pos.Percent(25);
            Width = Dim.Percent(50);
            Height = Dim.Percent(50);

            Title = "Pos Designer";

            btnOk.Clicked += BtnOk_Clicked;
            btnCancel.Clicked += BtnCancel_Clicked;
            Cancelled = true;
            Modal = true;

            ddType.SetSource(Enum.GetValues(typeof(PosType)).Cast<Enum>().ToList());
            ddRelativeTo.SetSource(Design.GetSiblings().ToList());
        }

        private void BtnCancel_Clicked()
        {
            Cancelled = true;
            Application.RequestStop();
        }

        private void BtnOk_Clicked()
        {
            Cancelled = !GetPosDesign(Design,Property, out var result);
            Result = result;
            Application.RequestStop();
        }


        public bool GetPosDesign(Design owner, Property property, out SnippetProperty result)
        {
            // pick what type of Pos they want
            
            switch (GetPosType())
            {
                case PosType.Absolute:
                    return DesignPosAbsolute(property, out result);
                case PosType.Relative:
                    return DesignPosRelative(owner, property, out result);

                case PosType.Percent:
                    return DesignPosPercent(property, out result);
                case PosType.Anchor: throw new NotImplementedException();

                default: throw new ArgumentOutOfRangeException();

            }
        }

        private PosType GetPosType()
        {
            return (PosType)ddType.SelectedItem;
        }

        private bool DesignPosRelative(Design owner, Property property, out SnippetProperty result)
        {
            var relativeTo = ddRelativeTo.SelectedItem == -1 ? null : ddRelativeTo.Source.ToList()[ddRelativeTo.SelectedItem] as Design;

            if (relativeTo != null)
            {
                if (Modals.Get("Side", "Pick", Enum.GetValues<Side>(), out Side side))
                {
                    if (Modals.GetInt("Offset", "Offset", 0, out int offset))
                    {
                        switch (side)
                        {
                            case Side.Above:
                                result = BuildOffsetPos(property, "Pos.Top({0})", Pos.Top(relativeTo.View), offset, () => relativeTo.FieldName);
                                break;
                            case Side.Below:
                                result = BuildOffsetPos(property, "Pos.Bottom({0})", Pos.Bottom(relativeTo.View), offset, () => relativeTo.FieldName);
                                break;
                            case Side.Left:
                                result = BuildOffsetPos(property, "Pos.Left({0})", Pos.Left(relativeTo.View), offset, () => relativeTo.FieldName);
                                break;
                            case Side.Right:
                                result = BuildOffsetPos(property, "Pos.Right({0})", Pos.Right(relativeTo.View), offset, () => relativeTo.FieldName);
                                break;
                            default: throw new ArgumentOutOfRangeException(nameof(side));
                        }

                        return true;
                    }
                }
            }

            result = null;
            return false;
        }

        private bool DesignPosAbsolute(Property property, out SnippetProperty result)
        {

            if (Modals.GetInt(property.PropertyInfo.Name, "Absolute Position", 0, out int newPos))
            {
                result = new SnippetProperty(property, newPos.ToString(), (Pos)newPos);
                return true;
            }

            result = null;
            return false;
        }

        private bool DesignPosPercent(Property property, out SnippetProperty result)
        {
            if (Modals.GetFloat(property.PropertyInfo.Name, "Percent(0 - 100)", 0.5f, out float newPercent))
            {
                if (Modals.GetInt("Offset", "Offset", 0, out int offset))
                {
                    result = BuildOffsetPos(property, $"Pos.Percent({newPercent})", Pos.Percent(newPercent), offset);
                    return true;
                }
            }

            result = null;
            return false;
        }

        private SnippetProperty BuildOffsetPos(Property property, string code, Pos pos, int offset, params Func<string>[] codeParameters)
        {
            if (offset == 0)
            {
                return new SnippetProperty(property, code, pos, codeParameters);
            }
            else
            if (offset > 0)
            {
                return new SnippetProperty(property, $"{code} + {offset}", pos + offset, codeParameters);
            }
            else
            {
                return new SnippetProperty(property, $"{code} - {-offset}", pos - offset, codeParameters);
            }
        }
    }
}
